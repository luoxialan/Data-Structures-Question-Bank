[
   {
      "type":"10",
      "content":"Given a linked list, remove the $n^th$ node from the end of list and return its head. For exaple, Given linked list: 1->2->3->4->5, and n = 2. After removing the second node from the end, the linked list becomes 1->2->3->5. Note: Given n will always be valid. Try to do this in one pass.",
      "lang":"1",
      "tag":"List",
      "difficulty":"1",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Given a sorted linked list, delete all duplicates such that each element appear only once. For example, Given 1->1->2, return 1->2. Given 1->1->2->3->3, return 1->2->3.",
      "lang":"1",
      "tag":"List",
      "difficulty":"1",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.",
      "lang":"1",
      "tag":"List",
      "difficulty":"1",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Given a linked list, swap every two adjacent nodes and return its head. For example, Given 1->2->3->4, you should return the list as 2->1->4->3. Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.",
      "lang":"1",
      "tag":"List",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Sort a linked list in O(n log n) time using constant space complexity.",
      "lang":"1",
      "tag":"List, Sort",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Given a list, rotate the list to the right by k places, where k is non-negative. For example: Given 1->2->3->4->5->NULL and k = 2, return 4->5->1->2->3->NULL.",
      "lang":"1",
      "tag":"List",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Reverse a linked list from position m to n. Do it in-place and in one-pass. For example: Given 1->2->3->4->5->NULL, m = 2 and n = 4, return 1->4->3->2->5->NULL. Note: Given m, n satisfy the following condition: 1 ? m ? n ? length of list.",
      "lang":"1",
      "tag":"List",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. For example, Given 1->2->3->3->4->4->5, return 1->2->5. Given 1->1->1->2->3, return 2->3.",
      "lang":"1",
      "tag":"List",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x. You should preserve the original relative order of the nodes in each of the two partitions. For example, Given 1->4->3->2->5->2 and x = 3, return 1->2->2->4->3->5.",
      "lang":"1",
      "tag":"List",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Given a linked list, determine if it has a cycle in it. Follow up: Can you solve it without using extra space?",
      "lang":"1",
      "tag":"List",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Given a linked list, return the node where the cycle begins. If there is no cycle, return null. Follow up: Can you solve it without using extra space?",
      "lang":"1",
      "tag":"List",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Sort a linked list using insertion sort.",
      "lang":"1",
      "tag":"List, Sort",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.",
      "lang":"1",
      "tag":"List, Depth-first Search ",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. Input: (2 -> 4 -> 3) + (5 -> 6 -> 4) Output: 7 -> 0 -> 8",
      "lang":"1",
      "tag":"List",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Given a linked list, reverse the nodes of a linked list k at a time and return its modified list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is. You may not alter the values in the nodes, only nodes itself may be changed. Only constant memory is allowed. For example, Given this linked list: 1->2->3->4->5. For k = 2, you should return: 2->1->4->3->5. For k = 3, you should return: 3->2->1->4->5",
      "lang":"1",
      "tag":"List",
      "difficulty":"3",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.",
      "lang":"1",
      "tag":"List, Heap",
      "difficulty":"3",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null. Return a deep copy of the list.",
      "lang":"1",
      "tag":"List, Hash Table",
      "difficulty":"3",
      "URL":"https://leetcode.com/tag/linked-list/"
   },
   {
      "type":"10",
      "content":"Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. The brackets must close in the correct order, \"()\" and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not.",
      "lang":"1",
      "tag":"Stack, String",
      "difficulty":"1",
      "URL":"https://leetcode.com/tag/stack/"
   },
   {
      "type":"10",
      "content":"Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. push(x) -- Push element x onto stack. pop() -- Removes the element on top of the stack. top() -- Get the top element. getMin() -- Retrieve the minimum element in the stack.",
      "lang":"1",
      "tag":"Stack, Data Structure",
      "difficulty":"1",
      "URL":"https://leetcode.com/tag/stack/"
   },
   {
      "type":"10",
      "content":"Given an absolute path for a file (Unix-style), simplify it. For example, path = \"/home/\", => \"/home\". path = \"/a/./b/../../c/\", => \"/c\"",
      "lang":"1",
      "tag":"Stack, String",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/stack/"
   },
   {
      "type":"10",
      "content":"Evaluate the value of an arithmetic expression in Reverse Polish Notation. Valid operators are +, -, *, /. Each operand may be an integer or another expression. Some examples: [\"2\", \"1\", \"+\", \"3\", \"*\"] -> ((2 + 1) * 3) -> 9, [\"4\", \"13\", \"5\", \"/\", \"+\"] -> (4 + (13 / 5)) -> 6",
      "lang":"1",
      "tag":"Stack",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/stack/"
   },
   {
      "type":"10",
      "content":"Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST. Calling next() will return the next smallest number in the BST. Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.",
      "lang":"1",
      "tag":"Stack, Tree",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/stack/"
   },
   {
      "type":"10",
      "content":"Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. For example, Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.",
      "lang":"1",
      "tag":"Stack",
      "difficulty":"3",
      "URL":"https://leetcode.com/tag/stack/"
   },
   {
      "type":"10",
      "content":"Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing all ones and return its area.",
      "lang":"1",
      "tag":"Stack, Hash Table,",
      "difficulty":"3",
      "URL":"https://leetcode.com/tag/stack/"
   },
   {
      "type":"10",
      "content":"Given an array of integers, find two numbers such that they add up to a specific target number. The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based. You may assume that each input would have exactly one solution.",
      "lang":"1",
      "tag":"Hash Table",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/hash-table/"
   },
   {
      "type":"10",
      "content":"Given an array of integers, every element appears twice except for one. Find that single one. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?",
      "lang":"1",
      "tag":"Hash Table",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/hash-table/"
   },
   {
      "type":"10",
      "content":"All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: \"ACGAATTCCG\". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA. Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.",
      "lang":"1",
      "tag":"Hash Table",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/hash-table/"
   },
   {
      "type":"10",
      "content":"Given a string, find the length of the longest substring without repeating characters. For example, the longest substring without repeating letters for \"abcabcbb\" is \"abc\", which the length is 3. For \"bbbbb\" the longest substring is \"b\", with the length of 1.",
      "lang":"1",
      "tag":"Hash Table",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/hash-table/"
   },
   {
      "type":"10",
      "content":"Given two integers representing the numerator and denominator of a fraction, return the fraction in string format. If the fractional part is repeating, enclose the repeating part in parentheses.",
      "lang":"1",
      "tag":"Hash Table",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/hash-table/"
   },
   {
      "type":"10",
      "content":"Given an array of strings, return all groups of strings that are anagrams. Note: All inputs will be in lower-case.",
      "lang":"1",
      "tag":"Hash Table",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/hash-table/"
   },
   {
      "type":"10",
      "content":"Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target. Note: Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ? b ? c ? d). The solution set must not contain duplicate quadruplets.",
      "lang":"1",
      "tag":"Hash Table",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/hash-table/"
   },
   {
      "type":"10",
      "content":"You are given a string, S, and a list of words, L, that are all of the same length. Find all starting indices of substring(s) in S that is a concatenation of each word in L exactly once and without any intervening characters.",
      "lang":"1",
      "tag":"Hash Table",
      "difficulty":"3",
      "URL":"https://leetcode.com/tag/hash-table/"
   },
   {
      "type":"10",
      "content":"Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n). Note: If there is no such window in S that covers all characters in T, return the emtpy string \"\". If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.",
      "lang":"1",
      "tag":"Hash Table",
      "difficulty":"3",
      "URL":"https://leetcode.com/tag/hash-table/"
   },
   {
      "type":"10",
      "content":"Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.",
      "lang":"1",
      "tag":"Hash Table",
      "difficulty":"3",
      "URL":"https://leetcode.com/tag/hash-table/"
   },
   {
      "type":"10",
      "content":"A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null. Return a deep copy of the list.",
      "lang":"1",
      "tag":"Hash Table",
      "difficulty":"3",
      "URL":"https://leetcode.com/tag/hash-table/"
   },
   {
      "type":"10",
      "content":"Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue. Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively. Note: You are not suppose to use the library's sort function for this problem.",
      "lang":"1",
      "tag":"Sort",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/sort/"
   },
   {
      "type":"10",
      "content":"Given a list of non negative integers, arrange them such that they form the largest number. For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330. Note: The result may be very large, so you need to return a string instead of an integer.",
      "lang":"1",
      "tag":"Sort",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/sort/"
   },
   {
      "type":"10",
      "content":"Given a collection of intervals, merge all overlapping intervals.",
      "lang":"1",
      "tag":"Sort",
      "difficulty":"3",
      "URL":"https://leetcode.com/tag/sort/"
   },
   {
      "type":"10",
      "content":"Given an unsorted array, find the maximum difference between the successive elements in its sorted form. Try to solve it in linear time/space. Return 0 if the array contains less than 2 elements. You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.",
      "lang":"1",
      "tag":"Sort",
      "difficulty":"3",
      "URL":"https://leetcode.com/tag/sort/"
   },
   {
      "type":"10",
      "content":"Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary). You may assume that the intervals were initially sorted according to their start times.",
      "lang":"1",
      "tag":"Sort",
      "difficulty":"3",
      "URL":"https://leetcode.com/tag/sort/"
   },
   {
      "type":"10",
      "content":"Given two binary trees, write a function to check if they are equal or not. Two binary trees are considered equal if they are structurally identical and the nodes have the same value.",
      "lang":"1",
      "tag":"Tree, Depth-first Search",
      "difficulty":"1",
      "URL":"https://leetcode.com/tag/tree/"
   },
   {
      "type":"10",
      "content":"Given a binary tree, find its minimum depth.",
      "lang":"1",
      "tag":"Tree, Depth-first Search",
      "difficulty":"1",
      "URL":"https://leetcode.com/tag/tree/"
   },
   {
      "type":"10",
      "content":"Given a binary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
      "lang":"1",
      "tag":"Tree, Depth-first Search",
      "difficulty":"1",
      "URL":"https://leetcode.com/tag/tree/"
   },
   {
      "type":"10",
      "content":"Given a binary tree, determine if it is height-balanced. For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.",
      "lang":"1",
      "tag":"Tree, Depth-first Search",
      "difficulty":"1",
      "URL":"https://leetcode.com/tag/tree/"
   },
   {
      "type":"10",
      "content":"Given an array where elements are sorted in ascending order, convert it to a height balanced BST.",
      "lang":"1",
      "tag":"Tree, Depth-first Search",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/tree/"
   },
   {
      "type":"10",
      "content":"Given preorder and inorder traversal of a tree, construct the binary tree. Note: You may assume that duplicates do not exist in the tree.",
      "lang":"1",
      "tag":"Tree, Depth-first Search",
      "difficulty":"2",
      "URL":"https://leetcode.com/tag/tree/"
   }
]